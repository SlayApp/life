/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    TopicDto: {
      /**
       * @description The topic name to subscribe/unsubscribe from
       * @example character-updates
       */
      topic: string;
    };
    PublishDto: {
      /**
       * @description The topic name to subscribe/unsubscribe from
       * @example character-updates
       */
      topic: string;
      /**
       * @description The data to publish to the topic
       * @example {
       *   "message": "Hello World"
       * }
       */
      data: Record<string, never>;
    };
    CharacterMessageDto: {
      /** @description Message Deduplication ID, coming from the clientside */
      deduplicationId: string;
      /**
       * @description Character ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      characterId: string;
      /**
       * @description The message content
       * @example Hello, how are you?
       */
      message: string;
    };
    ErrorDto: {
      /**
       * @description Error message
       * @example Topic is required
       */
      message: string;
    };
    InitializeInterestBasedConversationDto: {
      /**
       * @deprecated
       * @description dont send. User ID is extracted from the socket
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      userId: string;
      /**
       * @description Interests of the user
       * @example [
       *   "reading",
       *   "traveling",
       *   "cooking"
       * ]
       */
      interests: string[];
    };
    MessageResponseDto: {
      /** @description Deduplication ID */
      deduplicationId: string;
      /** @description Message ID */
      id: number;
      /** @description Message content */
      content: string;
      /** @description True if the message is from user, false if from character */
      isFromUser: boolean;
      /**
       * Format: date-time
       * @description Creation timestamp
       */
      createdAt: string;
    };
    CharacterRTO: {
      /** Character ID */
      id: string;
      /** Character name */
      name: string;
      /** Profile picture URL */
      profilePicture?: string;
      /** Character description */
      description?: string;
    };
    CharacterResponseRTO: {
      /** @description Message object */
      message: components['schemas']['MessageResponseDto'];
      /** @description Character object for the clientside */
      character: components['schemas']['CharacterRTO'];
      /** @description Is multi-part response */
      isMultiPart?: boolean;
      /** @description Message index */
      messageIndex?: number;
      /** @description Total messages */
      totalMessages?: number;
      /** @description Introduced character ID */
      introducedCharacterId?: number;
      /** @description Is introduction message */
      isIntroductionMessage?: boolean;
      /** @description Will message user */
      willMessageUser?: boolean;
      /** @description Message delay */
      messageDelay?: number;
    };
    CharacterTypingDto: {
      /**
       * @description Character ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      characterId: string;
      /**
       * @description User ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      userId: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
